unit uJson;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, Vcl.ExtCtrls, Vcl.Buttons,
  Data.DB, Vcl.Grids, Vcl.DBGrids, FireDAC.Stan.Intf, FireDAC.Stan.Option,
  FireDAC.Stan.Param, FireDAC.Stan.Error, FireDAC.DatS, FireDAC.Phys.Intf,
  FireDAC.DApt.Intf, FireDAC.Comp.DataSet, FireDAC.Comp.Client,

  // unit do CRM
  ufuncoes,

  // units para JSON MODELO 1
  System.json,

  // units para JSON MODELO 2
  system.json.types, system.json.writers, system.json.Builders;

type
  TfrmJson = class(TForm)
    Panel1: TPanel;
    Panel2: TPanel;
    Panel3: TPanel;
    Panel4: TPanel;
    Splitter1: TSplitter;
    mmJson: TMemo;
    SpeedButton1: TSpeedButton;
    Panel5: TPanel;
    dmtFuncionario: TFDMemTable;
    dmtFuncionarioid: TIntegerField;
    dmtFuncionarionome: TStringField;
    dmtFuncionariosalario: TFloatField;
    dsFuncionario: TDataSource;
    DBGrid1: TDBGrid;
    Panel6: TPanel;
    Label1: TLabel;
    Label2: TLabel;
    Label3: TLabel;
    edtID: TEdit;
    edtNome: TEdit;
    edtSalario: TEdit;
    chkFormatar: TCheckBox;
    sbtIncluiReg: TSpeedButton;
    Label4: TLabel;
    Edit1: TEdit;
    dmtFuncionarioemail: TStringField;
    plGerarJson: TPanel;
    sbtModelo1: TSpeedButton;
    sbtModelo2: TSpeedButton;
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure sbtModelo1Click(Sender: TObject);
    procedure sbtIncluiRegClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure FormActivate(Sender: TObject);
    procedure SpeedButton1Click(Sender: TObject);
    procedure sbtModelo2Click(Sender: TObject);
  private
      /// <summary>
      ///   verifica se os campos edit foram informados e seta o foco no erro
      /// </summary>
      function fValidarDados : boolean;
      /// <summary>
      ///   limpa os campo edit para nova inclusao
      /// </summary>
      procedure limpaEdit;
  public
      /// <summary>
      ///   inclui os dados na tabela
      /// </summary>
      function incluiReg(tid,tnome,tsalario:string):boolean;
    { Public declarations }
  end;

var
  frmJson: TfrmJson;

implementation

{$R *.dfm}

procedure TfrmJson.FormActivate(Sender: TObject);
begin
    sbtIncluiRegClick(sender);
end;

procedure TfrmJson.FormClose(Sender: TObject; var Action: TCloseAction);
begin
        action:=cafree;
        frmJson:=nil;
end;

procedure TfrmJson.sbtModelo1Click(Sender: TObject);
var
  jjsonFuncionario : tjsonObject;
  jjsonFuncionarios : TJSONArray;
  erro : Boolean;
begin
  if (dmtFuncionario.RecordCount <= 0) then
  begin
    showmessage('Não há dados. Favor incluir primeiro.');
    exit;
  end;

  erro:=false;
  try
      try
          jjsonFuncionarios := TJSONArray.Create;
          dmtFuncionario.First;
          while not dmtFuncionario.Eof do
          begin
              jjsonFuncionario := tjsonObject.Create;
              jjsonFuncionario.AddPair(dmtFuncionarioid.FieldName.ToLower, dmtFuncionarioid.AsString);
              jjsonFuncionario.AddPair(dmtFuncionarioNome.FieldName.ToLower, dmtFuncionarionome.AsString);
              jjsonFuncionario.AddPair(dmtFuncionarioSalario.FieldName.ToLower, TJSONNumber.create(dmtFuncionarioSalario.asfloat));
              jjsonFuncionario.AddPair(dmtFuncionarioemail.FieldName.ToLower, dmtFuncionarioemail.AsString);
              jjsonFuncionarios.AddElement(jjsonFuncionario);
              dmtFuncionario.Next;
          end;
      except
            erro:=true;
      end;
      mmJson.Text:=jjsonFuncionarios.ToString;
  finally
    begin
      jjsonFuncionarios.Free;
      if erro = true then
          showmessage('Erro ao criar JSON!');
    end;
  end;
  showmessage('Fim da operação.');
end;

procedure TfrmJson.sbtModelo2Click(Sender: TObject);
var
//  jjsonFuncionario : TJSONObjectBuilder;
  jjsonTextW : TJsonTextWriter;
//  jjsonStrinW : TStringWriter;
begin
    if (chkFormatar.Checked = true) then
        jjsonTextW.Formatting := TJsonFormatting.Indented
    else
        jjsonTextW.Formatting := TJsonFormatting.None;
    try
      jjsonTextW := TJsonTextWriter.Create(TStringWriter.Create,true);
      jjsonTextW.WriteStartArray;
      dmtFuncionario.First;
      while not dmtFuncionario.Eof do
      begin
        jjsonTextW.WriteStartObject;
        jjsonTextW.WritePropertyName('id');
        jjsonTextW.WriteValue(dmtFuncionarioid.AsInteger);
        jjsonTextW.WritePropertyName('nome');
        jjsonTextW.WriteValue(dmtFuncionarionome.AsString);
        jjsonTextW.WritePropertyName('salario');
        jjsonTextW.WriteValue(dmtFuncionariosalario.AsFloat);
        jjsonTextW.WritePropertyName('email');
        jjsonTextW.WriteValue(dmtFuncionarioemail.AsString);
        jjsonTextW.WriteEndObject;
        dmtFuncionario.Next;
      end;
      jjsonTextW.WriteEnd;
      mmJson.Text:=jjsonTextW.ToString;
    finally
      jjsonTextW.Free
    end;




//  try
//

//
//    jjsonFuncionario := TJSONObjectBuilder.Create(jjsonTextW);
//    jjsonTextW := TJsonTextWriter.Create(jjsonStrinW);
//    jjsonStrinW := TStringWriter.Create;
//
//    jjsonFuncionario
//      .beginObject
//        .add('id', strtoint() )
//        .add('nome',)
//        .add('salario', StrToFloat())
//        .add('email',)
//      .EndObject;
//
//    mmJson.Text:=jjsonStrinW.ToString;
//
//  finally
//      jjsonFuncionario.Free;
//      jjsonTextW.Free;
//      jjsonStrinW.Free;
//  end;
end;

procedure TfrmJson.SpeedButton1Click(Sender: TObject);
begin
  try
      ForceDirectories('c:\temp');

      ufuncoes.salvaImagemDoForm('c:\temp\telaJSON.jpeg', Screen.ActiveForm);
      ShowMessage('Arquivo(S) salvos na pasta c:\temp.  IMAGEM e JSON');
  except
      showmessage('É necessário a pasta criada em c:\temp. Onde salva os arquivos.');
  end;
end;

procedure TfrmJson.sbtIncluiRegClick(Sender: TObject);
begin
  if fValidarDados = false then
  begin
     showmessage('Favor verificar os dados!');
     exit;
  end;
  if incluiReg(edtid.Text,edtnome.Text,edtsalario.Text) then
  begin
      limpaEdit;
  end;
end;

function incluiReg(tid,tnome,tsalario:string):boolean;
begin
  try

  except
      result:=false;
  end;
end;

procedure TfrmJson.FormCreate(Sender: TObject);
begin
  dmtFuncionario.Open;
end;

function TfrmJson.fValidarDados : boolean;
var
  i:integer;
begin
    result:=true;
    for I := 0 to ComponentCount-1 do
    begin
        if (Components[i] is TEdit) then
        begin
          if (length(trim(TEdit(Components[i]).Text)) <= 0) then
          begin
            result:=false;
            TEdit(Components[i]).SetFocus;
            break;
          end;
        end;
    end;
end;

function TfrmJson.incluiReg(tid, tnome, tsalario: string): boolean;
begin
    try
         dmtFuncionario.Append;
         dmtFuncionario.FieldByName('id').Value:=tid;
         dmtFuncionario.FieldByName('nome').Value:=tnome;
         dmtFuncionario.FieldByName('salario').Value:=tsalario;
         dmtFuncionario.FieldByName('email').Value:=tsalario;
         dmtFuncionario.Post;
    except
          showmessage('Erro na inclusão da tabela.'+#13+'Campos ID e Salario devem ser numéricos.');
          result:=false;
    end;
    result:=true;
end;

procedure TfrmJson.limpaEdit;
var
  i:integer;
begin
    for I := 0 to ComponentCount-1 do
    begin
        if (Components[i] is TEdit) then
        begin
            TEdit(Components[i]).Clear;
        end;
    end;
    edtid.setfocus;
end;

end.
